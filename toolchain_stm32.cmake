get_filename_component(STM32_CMAKE_DIR ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
set(CMAKE_MODULE_PATH ${STM32_CMAKE_DIR} ${CMAKE_MODULE_PATH})

# based on https://github.com/ObKo/stm32-cmake/blob/master/cmake/gcc_stm32.cmake

if(NOT TARGET_TRIPLET)
    set(TARGET_TRIPLET "arm-none-eabi")
    message(STATUS "No TARGET_TRIPLET specified, using default: " ${TARGET_TRIPLET})
endif()

set(CMAKE_SYSTEM_NAME       Generic)
set(CMAKE_SYSTEM_PROCESSOR  arm)

if (WIN32)
    set(TOOL_EXECUTABLE_SUFFIX ".exe")
else()
    set(TOOL_EXECUTABLE_SUFFIX "")
endif()

if(NOT TOOLCHAIN_PREFIX)
    message(STATUS "NOT TOOLCHAIN_PREFIX !!!" )
	if(${CMAKE_VERSION} VERSION_LESS 3.6.0)
		message(STATUS "Cmake version: " ${CMAKE_VERSION} )
		include(CMakeForceCompiler)
		CMAKE_FORCE_C_COMPILER(  "${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}" GNU)
		CMAKE_FORCE_CXX_COMPILER("${TARGET_TRIPLET}-g++${TOOL_EXECUTABLE_SUFFIX}" GNU)
	else()
		message(STATUS "Cmake version: " ${CMAKE_VERSION} )
		set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
		set(CMAKE_C_COMPILER   "${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}")
		set(CMAKE_CXX_COMPILER "${TARGET_TRIPLET}-g++${TOOL_EXECUTABLE_SUFFIX}")
	endif()
	set(CMAKE_ASM_COMPILER     "${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}")

	set(CMAKE_OBJCOPY "${TARGET_TRIPLET}-objcopy${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "objcopy tool")
	set(CMAKE_OBJDUMP "${TARGET_TRIPLET}-objdump${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "objdump tool")
	set(CMAKE_SIZE    "${TARGET_TRIPLET}-size${TOOL_EXECUTABLE_SUFFIX}"    CACHE INTERNAL "size tool")
	set(CMAKE_DEBUGER "${TARGET_TRIPLET}-gdb${TOOL_EXECUTABLE_SUFFIX}"     CACHE INTERNAL "debuger")
	set(CMAKE_CPPFILT "${TARGET_TRIPLET}-c++filt${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "C++filt")

else()
	set(TOOLCHAIN_BIN_DIR "${TOOLCHAIN_PREFIX}/bin")
	set(TOOLCHAIN_INC_DIR "${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/include")
	set(TOOLCHAIN_LIB_DIR "${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/lib")

	if(${CMAKE_VERSION} VERSION_LESS 3.6.0)
		message(STATUS "Cmake version: " ${CMAKE_VERSION} )
		include(CMakeForceCompiler)
		CMAKE_FORCE_C_COMPILER(  "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}" GNU)
		CMAKE_FORCE_CXX_COMPILER("${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-g++${TOOL_EXECUTABLE_SUFFIX}" GNU)
	else()
		message(STATUS "Cmake version: " ${CMAKE_VERSION} )
		set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
		set(CMAKE_C_COMPILER   "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}")
		set(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-g++${TOOL_EXECUTABLE_SUFFIX}")
	endif()
	set(CMAKE_ASM_COMPILER     "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX}")

	set(CMAKE_OBJCOPY "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objcopy${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "objcopy tool")
	set(CMAKE_OBJDUMP "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objdump${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "objdump tool")
	set(CMAKE_SIZE    "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-size${TOOL_EXECUTABLE_SUFFIX}"    CACHE INTERNAL "size tool")
	set(CMAKE_DEBUGER "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gdb${TOOL_EXECUTABLE_SUFFIX}"     CACHE INTERNAL "debuger")
	set(CMAKE_CPPFILT "${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-c++filt${TOOL_EXECUTABLE_SUFFIX}" CACHE INTERNAL "C++filt")
endif()

# DEBUG FLAGS
set(CMAKE_C_FLAGS_DEBUG   "-Og -g" CACHE INTERNAL "c compiler flags debug")
set(CMAKE_CXX_FLAGS_DEBUG "-Og -g" CACHE INTERNAL "cxx compiler flags debug")
set(CMAKE_ASM_FLAGS_DEBUG "-g"     CACHE INTERNAL "asm compiler flags debug")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "-Xlinker -Map=output.map" CACHE INTERNAL "linker flags debug")

# RELEASE FLAGS
set(CMAKE_C_FLAGS_RELEASE   "-Os -flto" CACHE INTERNAL "c compiler flags release")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -flto" CACHE INTERNAL "cxx compiler flags release")
set(CMAKE_ASM_FLAGS_RELEASE ""          CACHE INTERNAL "asm compiler flags release")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "-Xlinker -Map=output.map -s -flto" CACHE INTERNAL "linker flags release")

# ROOT PATH
set(CMAKE_FIND_ROOT_PATH "${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}" ${EXTRA_FIND_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

function(STM32_SET_LD TARGET STM32_LINKER_SCRIPT)
    get_target_property(TARGET_LD_FLAGS ${TARGET} LINK_FLAGS)
	message(STATUS "TARGET_LD_FLAGS1: " ${TARGET_LD_FLAGS})
    if(TARGET_LD_FLAGS)
        set(TARGET_LD_FLAGS "\"-T${CMAKE_CURRENT_SOURCE_DIR}/${STM32_LINKER_SCRIPT}\" ${TARGET_LD_FLAGS}")
    else()
        set(TARGET_LD_FLAGS "\"-T${CMAKE_CURRENT_SOURCE_DIR}/${STM32_LINKER_SCRIPT}\"")
    endif()
    set_target_properties(${TARGET} PROPERTIES LINK_FLAGS ${TARGET_LD_FLAGS})
	message(STATUS "TARGET_LD_FLAGS2: " ${TARGET_LD_FLAGS})
endfunction()

function(STM32_ADD_BIN MYTARGET)
	message(STATUS "STM32_ADD_BIN MYTARGET: " ${MYTARGET})
	add_custom_command(TARGET ${MYTARGET} POST_BUILD
		COMMAND echo "Generate bin:" && ${CMAKE_OBJCOPY} -Obinary ${MYTARGET} ${MYTARGET}.bin
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generate bin..."
	)
	install(FILES ${MYTARGET}.bin DESTINATION bin)
endfunction()

function(STM32_ADD_HEX MYTARGET)
	message(STATUS "STM32_ADD_HEX MYTARGET: " ${MYTARGET})
    add_custom_command(TARGET ${MYTARGET} POST_BUILD
		COMMAND echo "Generate HEX:" && ${CMAKE_OBJCOPY} -Oihex ${MYTARGET} ${MYTARGET}.hex
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generate hex..."
	)
	install(FILES ${MYTARGET}.hex DESTINATION bin)
endfunction()

function(STM32_ADD_DUMP MYTARGET)
	message(STATUS "STM32_ADD_DUMP MYTARGET: " ${MYTARGET})
    add_custom_command(TARGET ${MYTARGET} POST_BUILD
		COMMAND echo "Generate DUMP:" && ${CMAKE_OBJDUMP} -x -D -S -s ${MYTARGET} | ${CMAKE_CPPFILT} > ${MYTARGET}.dump
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generate dump..."
	)
	install(FILES ${MYTARGET}.dump DESTINATION bin)
endfunction()

function(STM32_PRINT_SIZE MYTARGET)
	message(STATUS "STM32_PRINT_SIZE MYTARGET: " ${MYTARGET})
	add_custom_command(TARGET ${MYTARGET} POST_BUILD
		COMMAND echo "Check size:" && ${CMAKE_SIZE} ${MYTARGET}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Running size check..."
	)
endfunction()



